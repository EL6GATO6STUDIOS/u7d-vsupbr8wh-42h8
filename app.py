import streamlit as st
from googlesearch import search
from bs4 import BeautifulSoup
import requests
import random
from PIL import Image
from PyPDF2 import PdfReader

st.set_page_config(page_title="Cat CPT ğŸ˜º", layout="centered")
st.markdown("<h1 style='text-align: center;'>Cat CPT ğŸ˜º</h1>", unsafe_allow_html=True)

# GeÃ§miÅŸi sakla
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Stil ayarlarÄ±
def style_user(text):
    return f"""<div style="background-color:#DCF8C6; padding:10px; border-radius:10px; margin:10px 0;"><b>Sen:</b><br>{text}</div>"""

def style_bot(text):
    return f"""<div style="background-color:#E6E6EA; padding:10px; border-radius:10px; margin:10px 0;"><b>Cat CPT:</b><br>{text}</div>"""

# Fikir Ã¼retici
def generate_opinion_response(text):
    fikirler = [
        f"Bence {text} oldukÃ§a Ã¶nemli bir konu. KiÅŸiden kiÅŸiye deÄŸiÅŸebilir.",
        f"{text} bana kalÄ±rsa dikkatle deÄŸerlendirilmesi gereken bir durum.",
        f"AÃ§Ä±kÃ§asÄ± {text} hakkÄ±nda net bir fikrim var: oldukÃ§a karmaÅŸÄ±k.",
        f"{text} konusunda herkes aynÄ± fikirde olmayabilir, ama bence ilginÃ§ bir mesele."
    ]
    return random.choice(fikirler)

# Soru analizi
def is_gundelik(text):
    return any(x in text.lower() for x in ["selam", "merhaba", "naber", "nasÄ±lsÄ±n", "teÅŸekkÃ¼r"])

def is_analiz(text):
    return any(x in text.lower() for x in ["sence", "yorumla", "analiz", "dÃ¼ÅŸÃ¼nÃ¼yorsun", "bakÄ±ÅŸ aÃ§Ä±n", "karakter"])

# Google araÅŸtÄ±rmasÄ±
def google_arastir(query):
    try:
        results = list(search(query, num_results=1))
        if results:
            url = results[0]
            res = requests.get(url, timeout=10)
            soup = BeautifulSoup(res.text, "html.parser")
            for p in soup.find_all("p"):
                if len(p.text.strip()) > 60:
                    return p.text.strip()
        return "Uygun bir bilgi bulunamadÄ±."
    except Exception as e:
        return f"AraÅŸtÄ±rma hatasÄ±: {str(e)}"

# Girdi alanÄ±
text = st.text_input("MesajÄ±nÄ±zÄ± yazÄ±n...")

# YÃ¼kleme alanÄ±
uploaded = st.file_uploader("Dosya yÃ¼kleyin (.pdf, .txt, .jpg, .png)", type=["pdf", "txt", "jpg", "jpeg", "png"])
if uploaded:
    st.subheader("YÃ¼klenen Dosya:")
    if "pdf" in uploaded.type:
        reader = PdfReader(uploaded)
        content = "".join([p.extract_text() for p in reader.pages if p.extract_text()])
        st.text_area("PDF Ä°Ã§eriÄŸi", content)
    elif "text" in uploaded.type:
        content = uploaded.read().decode("utf-8")
        st.text_area("Metin DosyasÄ±", content)
    elif "image" in uploaded.type:
        img = Image.open(uploaded)
        st.image(img, caption="GÃ¶rsel", use_column_width=True)

# Girdi varsa yanÄ±t Ã¼ret
if text:
    if is_gundelik(text):
        if "selam" in text.lower() or "merhaba" in text.lower():
            response = "Merhaba! ğŸ˜Š Size nasÄ±l yardÄ±mcÄ± olabilirim?"
        elif "naber" in text.lower() or "nasÄ±lsÄ±n" in text.lower():
            response = "Ä°yiyim, sen nasÄ±lsÄ±n?"
        elif "teÅŸekkÃ¼r" in text.lower():
            response = "Rica ederim! Her zaman buradayÄ±m."
        else:
            response = "AnlayabildiÄŸim bir gÃ¼ndelik ifade algÄ±ladÄ±m."
    elif is_analiz(text):
        response = generate_opinion_response(text)
    else:
        response = google_arastir(text)

    # Sohbet geÃ§miÅŸine ekle
    st.session_state.chat_history.append((text, response))

# GeÃ§miÅŸi sÄ±rayla gÃ¶ster (ChatGPT benzeri)
if st.session_state.chat_history:
    for q, a in st.session_state.chat_history:
        st.markdown(style_user(q), unsafe_allow_html=True)
        st.markdown(style_bot(a), unsafe_allow_html=True)
