import streamlit as st
from PyPDF2 import PdfReader
from PIL import Image
from googlesearch import search
import requests
from bs4 import BeautifulSoup

st.set_page_config(page_title="Cat CPT ğŸ˜º", layout="wide")
st.title("Cat CPT ğŸ˜º")

# SorularÄ± ve cevaplarÄ± saklayacaÄŸÄ±mÄ±z liste
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# KullanÄ±cÄ±dan metin al
text = st.text_input("Sorunuzu yazÄ±n:")

# Dosya yÃ¼kleme alanÄ±
uploaded_file = st.file_uploader("Bir dosya yÃ¼kleyin (.pdf, .txt, .jpg, .png)", type=["pdf", "txt", "jpg", "jpeg", "png"])

# Dosya analiz kÄ±smÄ±
if uploaded_file is not None:
    file_type = uploaded_file.type
    st.subheader("YÃ¼klenen Dosya:")

    if "pdf" in file_type:
        reader = PdfReader(uploaded_file)
        all_text = ""
        for page in reader.pages:
            all_text += page.extract_text()
        st.text_area("PDF Ä°Ã§eriÄŸi", all_text)
    
    elif "text" in file_type:
        content = uploaded_file.read().decode("utf-8")
        st.text_area("Metin DosyasÄ± Ä°Ã§eriÄŸi", content)

    elif "image" in file_type:
        img = Image.open(uploaded_file)
        st.image(img, caption="YÃ¼klenen GÃ¶rsel", use_column_width=True)

# KullanÄ±cÄ±nÄ±n yazdÄ±ÄŸÄ± metin varsa iÅŸle
if text:
    text = text.lower()

    # GÃ¼ndelik konuÅŸmalara Ã¶zel cevap ver
    if "selam" in text or "merhaba" in text:
        response = "Selam! Size nasÄ±l yardÄ±mcÄ± olabilirim?"
    elif "naber" in text or "nasÄ±lsÄ±n" in text:
        response = "Ä°yiyim, sen nasÄ±lsÄ±n?"
    elif "teÅŸekkÃ¼r" in text:
        response = "Rica ederim! ğŸ˜Š"
    else:
        response = "AraÅŸtÄ±rÄ±lÄ±yor..."
        try:
            results = list(search(text, num_results=1))
            if results:
                url = results[0]
                res = requests.get(url, timeout=10)
                soup = BeautifulSoup(res.text, "html.parser")
                paragraphs = soup.find_all("p")
                found = False
                for p in paragraphs:
                    if len(p.text.strip()) > 50:
                        response = p.text.strip()
                        found = True
                        break
                if not found:
                    response = "Uygun bir cevap bulunamadÄ±."
            else:
                response = "HiÃ§ sonuÃ§ bulunamadÄ±."
        except Exception as e:
            response = f"AraÅŸtÄ±rma sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}"

    # Soruyu ve cevabÄ± geÃ§miÅŸe ekle
    st.session_state.chat_history.append((text, response))

# Ã–nceki soru-cevaplarÄ± sÄ±rayla gÃ¶ster
if st.session_state.chat_history:
    st.subheader("ğŸ§  Sohbet GeÃ§miÅŸi")
    for i, (q, a) in enumerate(st.session_state.chat_history, start=1):
        st.markdown(f"**{i}. Soru:** {q}")
        st.markdown(f"**{i}. Cevap:** {a}")
